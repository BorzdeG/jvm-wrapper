#!/usr/bin/env bash

#
JVMW_HOME=${HOME}/.jvm/
JVMW_PROPERTY_FILE="${JVMW_PROPERTY_FILE:-./jvmw.properties}"
OS=$(uname | tr '[:upper:]' '[:lower:]')
ARCH=$([[ "$(uname -m)" == "x86_64" ]] && echo "x64" || echo "i586")
ARCHIVE_EXT=$([[ "$(uname)" == "Darwin" ]] && echo "dmg" || echo "tar.gz")
#
REQUIRED_COMMANDS_CORE='awk tr grep head rm mv cd curl'
REQUIRED_COMMANDS_DARWIN='hdiutil xar cpio shasum'
REQUIRED_COMMANDS_LINUX='sha256sum tar'
#
JDK_VERSION_MAJOR=${JDK_VERSION_MAJOR}
JDK_VERSION_MINOR=${JDK_VERSION_MINOR}
#
OTN_USER_AGENT='Mozilla/5.0 https://github.com/itbasis/jvm-wrapper'
#
mkdir -p "${JVMW_HOME}"

function debug() {
	>&2 echo "[DEBUG] [${BASH_SOURCE[0]}:${FUNCNAME[1]}:${BASH_LINENO[0]}] $*"
	printf ''
}

function print_debug_info() {
	for key in OS ARCH JVMW_HOME ARCHIVE_EXT JDK_VERSION_MAJOR JDK_VERSION_MINOR JDK_VERSION JDK_CHECK_VERSION JDK_FULL_NAME JDK_HOME JAVA_HOME JAVA_EXEC JDK_PAGE_URL ARCHIVE_JDK_URL ARCHIVE_JDK_SHA256 ARCHIVE_FILE; do
		>&2 echo "[DEBUG] ${key}=${!key}";
	done
}

function error() {
	rm -f "${OTN_HEADERS_FILE}" "${OTN_CONTENT_FILE}" "${OTN_COOKIE_FILE}"
	print_debug_info
	>&2 echo "[ERROR] [${BASH_SOURCE[0]}:${FUNCNAME[1]}:${BASH_LINENO[0]}] $*"
	exit 1
}


function check_program_exists() {
	# shellcheck disable=SC2068
	for cmd in $@; do
		if [[ "$("$cmd" --version 2>&1)" == *"command not found"* ]]; then
			error "command not found: ${cmd}"
		fi
	done
}

function properties_parser() {
	while IFS='=' read -r key value || [[ -n "$key" ]]; do
		[[ -z "${!key}" ]] && eval "${key}='${value}'"
	done <<<"$1"
}

function properties_default() {
	cat << EOF
JDK_VERSION=
JDK_VERSION_MAJOR=9
JDK_VERSION_MINOR=
EOF
}

function properties_calculate() {
	if [[ ! -z "${JDK_VERSION}" ]]; then
		if [[ "${JDK_VERSION}" == *"u"* ]]; then
			JDK_VERSION_MAJOR="${JDK_VERSION%u*}"
			JDK_VERSION_MINOR="${JDK_VERSION#*u}"
		else
			JDK_VERSION_MAJOR="${JDK_VERSION}"
			unset JDK_VERSION_MINOR
		fi
	else
		#	TODO Fix mask for version greater than or equal to 9
		JDK_VERSION="${JDK_VERSION_MAJOR}$(if [[ ! -z "${JDK_VERSION_MINOR}" ]]; then
			echo "u${JDK_VERSION_MINOR}";
		fi)"
	fi
	if [[ ${JDK_VERSION_MAJOR} -lt 9 ]]; then
		JDK_CHECK_VERSION="1.${JDK_VERSION_MAJOR}.0$(if [[ ! -z "${JDK_VERSION_MINOR}" ]]; then
			echo "_${JDK_VERSION_MINOR}";
		fi)"
	else
		JDK_CHECK_VERSION="${JDK_VERSION_MAJOR}.0.1"
	fi
	JDK_FULL_NAME="jdk${JDK_VERSION}"
	JDK_HOME=$(echo "${JVMW_HOME}/${JDK_FULL_NAME}/$(if [[ "${OS}" == 'darwin' ]]; then
		echo 'Home';
	fi)" | sed s#//*#/#g)
	JAVA_HOME="${JDK_HOME}"
	JAVA_EXEC=$(echo "${JAVA_HOME}/bin/java" | sed s#//*#/#g)
	ARCHIVE_FILE=$(echo "${JVMW_HOME}/${JDK_FULL_NAME}.${ARCHIVE_EXT}" | sed s#//*#/#g)
}

function curl_get() {
	local url="$1"
	curl -kLsS -A "${OTN_USER_AGENT}" -D "${OTN_HEADERS_FILE}" -b "${OTN_COOKIE_FILE}" -c "${OTN_COOKIE_FILE}" -o "${OTN_CONTENT_FILE}" "${url}"
}

function curl_post() {
	otn_form_parse
	curl -kLsS -A "${OTN_USER_AGENT}" -D "${OTN_HEADERS_FILE}" -b "${OTN_COOKIE_FILE}" -c "${OTN_COOKIE_FILE}" -X POST -d "${OTN_FORM_DATA}" "${OTN_FORM_ACTION}" -o "${OTN_CONTENT_FILE}"
}

function ont_form_data() {
	IFS='>'
	local form_data=
	for fld in $(echo "$1" | awk '{ if (match($0, "<input")) print }'); do
		fld_name=$(echo "${fld}" | awk 'match($0, /name="([^"]+)/) { print substr($0, RSTART+6, RLENGTH-6) }')
		fld_value=$(echo "${fld}" | awk 'match($0, /value="([^"]+)/) { print substr($0, RSTART+7, RLENGTH-7) }')

		if [[ ! -z "${fld_name}" ]]; then
			if [[ "${fld_name}" == "userid" ]]; then
				fld_value=${ORACLE_USER}
			elif [[ "${fld_name}" == "pass" ]]; then
				fld_value=${ORACLE_PASSWORD}
			fi
			form_data="${form_data}&${fld_name}=${fld_value}"
		fi
	done
	echo "${form_data}"
}

function otn_clean_env() {
	unset OTN_FORM_DATA OTN_FORM_ACTION
}

function otn_form_parse() {
	otn_clean_env

	OTN_FORM_DATA=$(ont_form_data "$(cat "${OTN_CONTENT_FILE}")")
	OTN_FORM_ACTION=$(awk 'match($0, /action="([^"]+)/) { print substr($0, RSTART+8, RLENGTH-8) }' <"${OTN_CONTENT_FILE}")
	if [[ "${OTN_FORM_ACTION:0:1}" == "/" ]]; then
		OTN_FORM_ACTION="${OTN_HOST_LOGIN}${OTN_FORM_ACTION}"
	fi
}

function otn_redirect() {
	# FIXME https://github.com/koalaman/shellcheck/issues/1089
	# shellcheck disable=SC2155
	local host=$(awk '{ if (match($0, "http-equiv=\"refresh\".*")) print substr($0, RSTART, RLENGTH) }' <"${OTN_CONTENT_FILE}" | awk -F';' '{ if (match($0, "URL=[^\"]+")) print substr($0, RSTART+4, RLENGTH-4)}')
	if [[ "${host:0:1}" == "/" ]]; then
		host="${OTN_HOST_LOGIN}${host}"
	fi

	curl_get "${host}"
}

function otn_login() {
	if [[ -z "${ORACLE_USER}" ]] || [[ -z "${ORACLE_PASSWORD}" ]]; then
		error 'no values were found in ORACLE_USER and ORACLE_PASSWORD'
	fi

	OTN_COOKIE_FILE=$(mktemp -t OTN_COOKIE_XXXXX.tmp)
	OTN_HEADERS_FILE=$(mktemp -t OTN_HEADERS_XXXXX.tmp)
	OTN_CONTENT_FILE=$(mktemp -t OTN_CONTENT_XXXXX.tmp)
	OTN_URL_INDEX=https://www.oracle.com/index.html
	OTN_HOST_LOGIN=https://login.oracle.com
	OTN_URL_SIGNON="http://www.oracle.com/webapps/redirect/signon?nexturl=${OTN_URL_INDEX}"

	curl_get "${OTN_URL_SIGNON}" && curl_post && curl_post && otn_redirect && curl_post && curl_get "${OTN_URL_SIGNON}"
	rm -f "${OTN_HEADERS_FILE}" "${OTN_CONTENT_FILE}"
}

function get_latest_jdk_page_url() {
	JDK_PAGE_URL=http://www.oracle.com$(curl -s http://www.oracle.com/technetwork/java/javase/downloads/index.html | tr '"' $'\n' | grep "jdk${JDK_VERSION_MAJOR}-downloads" | head -1)
}

function get_archive_jdk_page_url() {
	local -r url_archive=http://www.oracle.com$(curl -sS http://www.oracle.com/technetwork/java/javase/downloads/index.html | tr '"' $'\n' | grep "/archive-" | head -1)
	debug "url_archive='${url_archive}'"
	JDK_PAGE_URL=http://www.oracle.com$(curl -sS "${url_archive}" | tr '"' $'\n' | grep "/java-archive.*-javase${JDK_VERSION_MAJOR}-" | head -1)
	debug "JDK_PAGE_URL='${JDK_PAGE_URL}'"
}

function get_archive_jdk_url() {
	debug "JDK_PAGE_URL='${JDK_PAGE_URL}'"
	local -r content=$(curl -s "${JDK_PAGE_URL}")
	local -r awk_mask='^downloads.*?jdk-'${JDK_VERSION}'.*?-'${ARCH}'.*?.'${ARCHIVE_EXT}
	debug "awk_mask=${awk_mask}"

	local -r awk_sep='":"|", "|"}'
	# shellcheck disable=SC2086
	local -r row=$(echo "${content}" | awk '{ if (match($0, "'${awk_mask}'")) print }' | head -1)
	ARCHIVE_JDK_URL=$(echo "${row}" | awk -F"${awk_sep}" '{ print $5 }')
	ARCHIVE_JDK_SHA256=$(echo "${row}" | awk -F"${awk_sep}" '{ print $9 }')

	debug "ARCHIVE_JDK_URL='${ARCHIVE_JDK_URL}'"
}

function download_archive_jdk() {
	if [[ -z "${ARCHIVE_JDK_URL}" ]]; then
		error "empty ARCHIVE_JDK_URL. Use page '${JDK_PAGE_URL}'"
	fi
	if [[ -f "${ARCHIVE_FILE}" ]]; then
		if [[ "${OS}" == "darwin" ]]; then
			sha256=$(shasum -a 256 "${ARCHIVE_FILE}" | cut -d' ' -f 1)
		else
			sha256=$(sha256sum "${ARCHIVE_FILE}" | cut -d' ' -f 1)
		fi
		if [[ "${sha256}" == "${ARCHIVE_JDK_SHA256}" ]]; then
			return;
		fi
	fi
	curl -kL -A "${OTN_USER_AGENT}" -b "${OTN_COOKIE_FILE}" -o "${ARCHIVE_FILE}" --cookie "oraclelicense=accept-securebackup-cookie" "${ARCHIVE_JDK_URL}"
}

function unpack_dmg() {
	hdiutil detach "/Volumes/${JDK_FULL_NAME}" -quiet -force 2> /dev/null
	hdiutil attach "${ARCHIVE_FILE}" -quiet -mountpoint "/Volumes/${JDK_FULL_NAME}" 2>&1 || error
	local -r PKG_FILE_NAME=$(find "/Volumes/${JDK_FULL_NAME}" -mindepth 1 -maxdepth 1 -name '*.pkg')
	local -r tmp_dir=$(mktemp -d -t "${JDK_FULL_NAME}.XXXXXX")
	cd "${tmp_dir}/" || { rm -Rf "${tmp_dir}";
		error "can't change directory: ${tmp_dir}/"; }
	xar -xf "${PKG_FILE_NAME}" . &> /dev/null || error
	for dir in ./*jdk*; do
		cpio -i <"${dir}/Payload" || exit 1
	done
	mv Contents "../${JDK_FULL_NAME}" 1> /dev/null 2>&1 || error
	cd - || error
	rm -Rf "${tmp_dir}" "${ARCHIVE_FILE}"
	#
	hdiutil detach "/Volumes/${JDK_FULL_NAME}" -force || error
}

function unpack_linux() {
	local tmp_dir=$(mktemp -d -t "${JDK_FULL_NAME}.XXXXXX")
	debug "tmp_dir=${tmp_dir}"
	tar xf "${ARCHIVE_FILE}" -C "${tmp_dir}" || { rm -Rf "${tmp_dir}";
		error 'error unpack archive...'; }
	mv "$(find "${tmp_dir}" -mindepth 1 -maxdepth 1 -type d)" "${JVMW_HOME}/${JDK_FULL_NAME}" || { rm -Rf "${tmp_dir}";
		error 'error move unpacked jdk...'; }
	rm -Rf "${tmp_dir}" "${ARCHIVE_FILE}"
}

function update_jdk() {
	get_latest_jdk_page_url
	get_archive_jdk_url
	if [[ "${ARCHIVE_JDK_URL}" == '' ]]; then
		get_archive_jdk_page_url
		get_archive_jdk_url
		otn_login
	fi
	download_archive_jdk
	if [[ "${ARCHIVE_EXT}" == "dmg" ]]; then
		unpack_dmg
	else
		unpack_linux
	fi
}

# build properties
[[ -f "${JVMW_HOME}/${JVMW_PROPERTY_FILE}" ]] && { properties_parser "$(cat "${JVMW_HOME}/${JVMW_PROPERTY_FILE}")"; }
[[ -f "${JVMW_PROPERTY_FILE}" ]] && { properties_parser "$(cat "${JVMW_PROPERTY_FILE}")"; }
properties_parser "$(properties_default)"
properties_calculate


# main section
if [[ "${OS}" == "darwin" ]]; then
	check_program_exists "${REQUIRED_COMMANDS_CORE}" "${REQUIRED_COMMANDS_DARWIN}"
else
	check_program_exists "${REQUIRED_COMMANDS_CORE}" "${REQUIRED_COMMANDS_LINUX}"
fi
#
if [[ ! -f "${JAVA_EXEC}" ]]; then
	update_jdk
fi
JDK_CURRENT_VERSION=$(${JAVA_EXEC} -version 2>&1 | head -1)
if [[ "${JDK_CURRENT_VERSION}" != *"${JDK_CHECK_VERSION}"* ]]; then
	debug "JDK_CURRENT_VERSION: '${JDK_CURRENT_VERSION}'"
	debug "JDK_CHECK_VERSION: '${JDK_CHECK_VERSION}'"
	error 'The local Java version does not match the expected version'
fi
#
if [[ "$1" == "info" ]]; then
	print_debug_info
	echo "JDK_HOME=${JDK_HOME}"
	echo "JAVA_HOME=${JAVA_HOME}"
elif [[ -z "${JDK_HOME}" ]]; then
	error "can't JDK_HOME"
elif [[ -z "$1" ]]; then
	error "command is empty"
else
	# execute program
	debug "command: ${JDK_HOME}/bin/$1" "${@:2}"
	eval "${JDK_HOME}/bin/$1" "${@:2}"
fi