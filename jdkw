#!/usr/bin/env bash

#
JVMW_HOME=${HOME}/.jvm
JVMW_PROPERTY_FILE="${JVMW_PROPERTY_FILE:-./jvmw.properties}"
OS=$(uname | tr '[:upper:]' '[:lower:]')
ARCH=$([[ "$(uname -m)" == "x86_64" ]] && echo "x64" || echo "i586")
ARCHIVE_EXT=$([[ "${OS}" == "darwin" ]] && echo "dmg" || echo "tar.gz")
#
REQUIRED_COMMANDS_CORE='awk tr head rm mv cd curl readlink dirname'
REQUIRED_COMMANDS_DARWIN='hdiutil xar cpio shasum'
REQUIRED_COMMANDS_LINUX='sha256sum tar'

# Hack for code verification
USE_SYSTEM_JDK="${USE_SYSTEM_JDK}"
JVMW_DEBUG="${JVMW_DEBUG}"
REQUIRED_UPDATE="${REQUIRED_UPDATE}"
JVM_VERSION=${JVM_VERSION}
JVM_VERSION_MAJOR=${JVM_VERSION_MAJOR}
JVM_VERSION_SECURITY=${JVM_VERSION_SECURITY}
ORACLE_USER=${ORACLE_USER}
ORACLE_PASSWORD=${ORACLE_PASSWORD}
#
OTN_USER_AGENT='Mozilla/5.0 https://github.com/itbasis/jvm-wrapper'
#
mkdir -p "${JVMW_HOME}"

function log_2() {
	printf "[%s] [%s" "$1" "${BASH_SOURCE[1]}"
	for i in "${!FUNCNAME[@]}"; do
		printf ":%s(%s)" "${FUNCNAME[$i]}" "${BASH_LINENO[$i]}"
	done
	printf "] %s\\n" "${*:2}"
}

function debug() {
	if [[ "${JVMW_DEBUG}" == "Y" ]]; then
		>&2 log_2 'DEBUG' "$*"
	fi
}

function error() {
	rm -f "${OTN_HEADERS_FILE}" "${OTN_CONTENT_FILE}" "${OTN_COOKIE_FILE}"
	JVMW_DEBUG=Y
	print_debug_info
	log_2 'ERROR' "$*"
	exit 1
}

function print_debug_info() {
	printf ''
	for key in OS ARCH JVMW_HOME ARCHIVE_EXT JVM_VERSION_MAJOR JVM_VERSION_SECURITY JVM_VERSION JDK_FULL_NAME JDK_ROOT_DIR JDK_HOME_DIR JAVA_HOME_DIR JVM_PAGE_URL ARCHIVE_JVM_URL ARCHIVE_JVM_CHECKSUM ARCHIVE_FILE LAST_UPDATE_FILE REQUIRED_UPDATE JVMW_DEBUG USE_SYSTEM_JDK; do
		>&2 debug "${key}=${!key}";
	done
}

function system_check_program_exists() {
	# shellcheck disable=SC2068
	for cmd in $@; do
		if [[ "$("$cmd" --version 2>&1)" == *"command not found"* ]]; then
			error "command not found: ${cmd}"
		fi
	done
}

function properties_parser() {
	while IFS='=' read -r key value || [[ -n "$key" ]]; do
		[[ ! -z "${key}" ]] && [[ -z "${!key}" ]] && { debug "${key}='${value}'"; eval "${key}='${value}'"; }
	done <<<"$1"
}

function properties_default() {
	cat << EOF
JVM_VERSION=9
REQUIRED_UPDATE=Y
JVMW_DEBUG=N
USE_SYSTEM_JDK=Y
EOF
}

function properties_build() {
	JVM_VERSION_MAJOR="${JVM_VERSION%_*}"
	JVM_VERSION_MAJOR="${JVM_VERSION_MAJOR#1.*}"
	JVM_VERSION_MAJOR="${JVM_VERSION_MAJOR%%.*}"
	JVM_VERSION_MAJOR="${JVM_VERSION_MAJOR%%u*}"
	if [[ "${JVM_VERSION}" != "${JVM_VERSION_MAJOR}" ]]; then
		JVM_VERSION_SECURITY="${JVM_VERSION##*.}"
		JVM_VERSION_SECURITY="${JVM_VERSION_SECURITY##*_}"
		JVM_VERSION_SECURITY="${JVM_VERSION_SECURITY##*u}"
	else
		unset JVM_VERSION_SECURITY
	fi

	JDK_FULL_NAME="jdk${JVM_VERSION}"
	JDK_ROOT_DIR=${JVMW_HOME}/${JDK_FULL_NAME}
	JDK_HOME_DIR=${JDK_ROOT_DIR}$([[ "${OS}" == 'darwin' ]] && echo '/Home')
	ARCHIVE_FILE=${JDK_ROOT_DIR}.${ARCHIVE_EXT}
	LAST_UPDATE_FILE=${JDK_ROOT_DIR}.last_update
}

function otn_curl_send_request() {
	local -r url="$1"
	debug "url='${url}'"
	local -r CURL_OPTIONS="${*:2}"
	# shellcheck disable=SC2086
	curl -kLs -A "${OTN_USER_AGENT}" -D "${OTN_HEADERS_FILE}" -b "${OTN_COOKIE_FILE}" -c "${OTN_COOKIE_FILE}" ${CURL_OPTIONS} "${url}" >"${OTN_CONTENT_FILE}"
}

function otn_curl_post() {
	otn_form_parser
	otn_curl_send_request "${OTN_FORM_ACTION}" -X POST -d "${OTN_FORM_DATA}"
}

function ont_form_data_build() {
	IFS='>'
	local form_data=
	for fld in $(echo "$1" | awk '{ if (match($0, "<input")) print }'); do
		fld_name=$(echo "${fld}" | awk 'match($0, /name="([^"]+)/) { print substr($0, RSTART+6, RLENGTH-6) }')
		fld_value=$(echo "${fld}" | awk 'match($0, /value="([^"]+)/) { print substr($0, RSTART+7, RLENGTH-7) }')

		if [[ ! -z "${fld_name}" ]]; then
			if [[ "${fld_name}" == "userid" ]]; then
				fld_value=${ORACLE_USER}
			elif [[ "${fld_name}" == "pass" ]]; then
				fld_value=${ORACLE_PASSWORD}
			fi
			form_data="${form_data}&${fld_name}=${fld_value}"
		fi
	done
	echo "${form_data}"
}

function otn_form_clean_env() {
	unset OTN_FORM_DATA OTN_FORM_ACTION
}

function otn_form_parser() {
	otn_form_clean_env

	OTN_FORM_DATA=$(ont_form_data_build "$(cat "${OTN_CONTENT_FILE}")")
	OTN_FORM_ACTION=$(awk 'match($0, /action="([^"]+)/) { print substr($0, RSTART+8, RLENGTH-8) }' <"${OTN_CONTENT_FILE}")
	if [[ "${OTN_FORM_ACTION:0:1}" == "/" ]]; then
		OTN_FORM_ACTION="${OTN_HOST_LOGIN}${OTN_FORM_ACTION}"
	fi
}

function otn_curl_redirect() {
	# FIXME https://github.com/koalaman/shellcheck/issues/1089
	# shellcheck disable=SC2155
	local host=$(awk '{ if (match($0, "http-equiv=\"refresh\".*")) print substr($0, RSTART, RLENGTH) }' <"${OTN_CONTENT_FILE}" | awk -F';' '{ if (match($0, "URL=[^\"]+")) print substr($0, RSTART+4, RLENGTH-4)}')
	if [[ "${host:0:1}" == "/" ]]; then
		host="${OTN_HOST_LOGIN}${host}"
	fi
	otn_curl_send_request "${host}"
}

function otn_login() {
	if [[ -z "${ORACLE_USER}" ]] || [[ -z "${ORACLE_PASSWORD}" ]]; then
		error 'no values were found in ORACLE_USER and ORACLE_PASSWORD'
	fi

	debug "login OTN as '${ORACLE_USER}'"

	OTN_COOKIE_FILE=$(mktemp -t OTN_COOKIE_XXXXX.tmp)
	OTN_HEADERS_FILE=$(mktemp -t OTN_HEADERS_XXXXX.tmp)
	OTN_CONTENT_FILE=$(mktemp -t OTN_CONTENT_XXXXX.tmp)
	OTN_URL_INDEX=https://www.oracle.com/index.html
	OTN_HOST_LOGIN=https://login.oracle.com
	OTN_URL_SIGNON="http://www.oracle.com/webapps/redirect/signon?nexturl=${OTN_URL_INDEX}"

	otn_curl_send_request "${OTN_URL_SIGNON}"
	otn_curl_post
	otn_curl_post
	otn_curl_redirect
	otn_curl_post
	otn_curl_send_request "${OTN_URL_SIGNON}"
	rm -f "${OTN_HEADERS_FILE}" "${OTN_CONTENT_FILE}"
}

function otn_page_latest_version_jdk_page_parser() {
	JVM_PAGE_URL=http://www.oracle.com$(curl -s http://www.oracle.com/technetwork/java/javase/downloads/index.html | awk 'match($0, /(\/technetwork\/java\/javase\/downloads\/jdk'"${JVM_VERSION_MAJOR}"'-downloads-[^\"]+)/) { print substr($0, RSTART, RLENGTH) }' | head -1)

	if [[ "${JVM_PAGE_URL}" == "http://www.oracle.com" ]]; then
		local -r url_archive=http://www.oracle.com$(curl -sS http://www.oracle.com/technetwork/java/javase/downloads/index.html | awk 'match($0, /(\/technetwork\/java\/javase\/archive-[^\"]+)/) { print substr($0, RSTART, RLENGTH) }' | head -1)

		JVM_PAGE_URL=http://www.oracle.com$(curl -sS "${url_archive}" | awk 'match($0, /(\/technetwork\/java\/javase\/downloads\/java-archive-[^'"${JVM_VERSION_MAJOR}"']+'"${JVM_VERSION_MAJOR}"'-[^\"]+)/) { print substr($0, RSTART, RLENGTH) }' 2>&1 | head -1)
	fi

	otn_page_archive_jdk_parser
}

function otn_page_archive_jdk_parser() {
	debug "JVM_PAGE_URL='${JVM_PAGE_URL}'"
	local -r content=$(curl -s "${JVM_PAGE_URL}")
	local awk_mask
	if [[ ${JVM_VERSION_MAJOR} -lt 9 ]]; then
		awk_mask='^downloads.*?jdk-'${JVM_VERSION_MAJOR}'u'${JVM_VERSION_SECURITY}'.*?-'${ARCH}'.*?.'${ARCHIVE_EXT}
	else
		awk_mask='^downloads.*?jdk-'${JVM_VERSION}'.*?-'${ARCH}'.*?.'${ARCHIVE_EXT}
	fi
	debug "awk_mask=${awk_mask}"

	# shellcheck disable=SC2034
	local -r separator='":"|", "|"}'
	# shellcheck disable=SC2086
	local -r row=$(echo "${content}" | awk '{ if (match($0, "'${awk_mask}'")) print }')

	IFS=',"' read -ra fields <<<"${row}"
	for i in "${!fields[@]}"; do
		case "${fields[$i]}" in
			filepath)
				ARCHIVE_JVM_URL="${fields[$i+2]}"
			;;
			SHA256)
				ARCHIVE_JVM_CHECKSUM="${fields[$i+2]}"
			;;
		esac
	done

	debug "ARCHIVE_JVM_URL='${ARCHIVE_JVM_URL}'"
}

function check_checksum() {
	if [[ ${JVM_VERSION_MAJOR} -lt 8 ]]; then
		# checksum was added only from version 8
		return 0
	fi
	local local_jdk_checksum
	if [[ "${OS}" == "darwin" ]]; then
		local_jdk_checksum=$(shasum -a 256 "${ARCHIVE_FILE}" | cut -d' ' -f 1)
	else
		local_jdk_checksum=$(sha256sum "${ARCHIVE_FILE}" | cut -d' ' -f 1)
	fi
	if [[ "${local_jdk_checksum}" != "${ARCHIVE_JVM_CHECKSUM}" ]]; then
		>&2 debug "checksum of archive does not match: ${local_jdk_checksum}"
		return 1
	fi
	return 0
}

function unpack_darwin() {
	hdiutil detach "/Volumes/${JDK_FULL_NAME}" -quiet -force 2> /dev/null
	hdiutil attach "${ARCHIVE_FILE}" -mountpoint "/Volumes/${JDK_FULL_NAME}" 2>&1 || error
	local -r PKG_FILE_NAME=$(find "/Volumes/${JDK_FULL_NAME}" -mindepth 1 -maxdepth 1 -name '*.pkg')
	local -r tmp_dir=$(mktemp -d -t "${JDK_FULL_NAME}.XXXXXX")
	cd "${tmp_dir}/" || { rm -Rf "${tmp_dir}";
		error "can't change directory: ${tmp_dir}/"; }
	xar -xf "${PKG_FILE_NAME}" . &> /dev/null || error
	for dir in ./*jdk*; do
		cpio -i <"${dir}/Payload" || exit 1
	done
	mv Contents "${JDK_ROOT_DIR}" 1> /dev/null 2>&1 || error
	cd - || error
	rm -Rf "${tmp_dir}" "${ARCHIVE_FILE}"
	#
	hdiutil detach "/Volumes/${JDK_FULL_NAME}" -force || error
}

function unpack_linux() {
	local -r tmp_dir=$(mktemp -d -t "${JDK_FULL_NAME}.XXXXXX")
	debug "tmp_dir=${tmp_dir}"
	tar xf "${ARCHIVE_FILE}" -C "${tmp_dir}" || { rm -Rf "${tmp_dir}";
		error 'error unpack archive...'; }
	mv "$(find "${tmp_dir}" -mindepth 1 -maxdepth 1 -type d)" "${JDK_ROOT_DIR}" || { rm -Rf "${tmp_dir}";
		error 'error move unpacked jdk...'; }
	rm -Rf "${tmp_dir}" "${ARCHIVE_FILE}"
}

function write_last_update() {
	local -r now=$(date +"%F %R")

	if [[ -z "${ARCHIVE_JVM_URL}" ]]; then
		printf "%s\\n%s" "${now}" "$(tail -n2 "${LAST_UPDATE_FILE}")" >"${LAST_UPDATE_FILE}"
	else
		printf "%s\\n%s\\n%s" "${now}" "${ARCHIVE_JVM_URL}" "${ARCHIVE_JVM_CHECKSUM}" >"${LAST_UPDATE_FILE}"
	fi
}

function check_the_need_for_downloading() {
	if [[ "${REQUIRED_UPDATE}" != "Y" ]]; then
		return 0
	fi
	if [[ ! -f "${JVM_HOME_DIR}/bin/java" ]]; then
		REQUIRED_UPDATE=Y
	else
		check_is_out_of_date
	fi

	if [[ "${REQUIRED_UPDATE}" != "Y" ]]; then
		debug "not required update"
		return 0
	fi

	otn_page_latest_version_jdk_page_parser

	if [[ ${ARCHIVE_JVM_URL} == *"${JVM_VERSION}"* ]] && [[ "${REQUIRED_UPDATE}" != "Y" ]]; then
		write_last_update
		return 0
	fi
}

function download_jdk() {
	check_the_need_for_downloading
	debug "REQUIRED_UPDATE=${REQUIRED_UPDATE}"
	if [[ "${REQUIRED_UPDATE}" != "Y" ]]; then
		return 0
	fi

	if [[ -z "${ARCHIVE_JVM_URL}" ]]; then
		error "empty ARCHIVE_JVM_URL. Use page '${JVM_PAGE_URL}'"
	fi
	#
	if [[ -f "${LAST_UPDATE_FILE}" ]] && [[ "${ARCHIVE_JVM_URL}" == "$(head -2 <"${LAST_UPDATE_FILE}" | tail -1)" ]]; then
		return 0
	fi
	#
	if [[ -f "${ARCHIVE_FILE}" ]]; then
		if [[ ${JVM_VERSION_MAJOR} -lt 8 ]]; then
			rm -f "${ARCHIVE_FILE}"
		elif check_checksum; then
			return
		fi
	fi
	#
	if [[ -d "${JDK_HOME_DIR}" ]]; then
		if [[ "$("${JVM_HOME_DIR}/bin/java" -fullversion 2>&1)" == *"${JVM_VERSION}"* ]]; then
			write_last_update
			return 0
		fi
	fi
	#
	if [[ "${ARCHIVE_JVM_URL}" != *'/otn-pub/'* ]]; then
		otn_login
	fi
	curl -kL -A "${OTN_USER_AGENT}" -b "${OTN_COOKIE_FILE}" -o "${ARCHIVE_FILE}" --cookie "oraclelicense=accept-securebackup-cookie" "${ARCHIVE_JVM_URL}"

	if ! check_checksum; then
		error
	fi

	eval "unpack_${OS}"

	write_last_update
}

function main_properties() {
	[[ -f "${JVMW_HOME}/${JVMW_PROPERTY_FILE}" ]] && { properties_parser "$(cat "${JVMW_HOME}/${JVMW_PROPERTY_FILE}")"; }
	[[ -f "${JVMW_PROPERTY_FILE}" ]] && { properties_parser "$(cat "${JVMW_PROPERTY_FILE}")"; }
	properties_parser "$(properties_default)"
	properties_build
}

function check_is_out_of_date() {
	REQUIRED_UPDATE=N
	if [[ ! -f "${LAST_UPDATE_FILE}" ]]; then
		debug "not found file: '${LAST_UPDATE_FILE}'"
		REQUIRED_UPDATE=Y
	else
		local -r luf_date="$(head -1 <"${LAST_UPDATE_FILE}")"
		# shellcheck disable=SC2005
		local -r prev_date=$([[ "${OS}" == "darwin" ]] && echo "$(date -jf '%F %R' "${luf_date}" +%j)" || echo "$(date --date="${luf_date}" '+%j')")
		local -r curr_date=$(date +%j)
		debug "prev_date='${prev_date}', curr_date='${curr_date}'"
		if [[ ${curr_date} > ${prev_date} ]]; then
			REQUIRED_UPDATE=Y
		fi
	fi
	return 0
}

function whereis() {
	for path in ${PATH//:/ }; do
		if [[ -f "${path}/${1}" ]]; then
			echo "${path}/${1}"
			return 0
		fi
	done
}

function get_system_path() {
	local cmd_path ls_output jvm_dir

	local -r cmd="${2}"
	cmd_path=$(whereis "${cmd}")
	ls_output="$(ls -l "${cmd_path}")"
	while [[ "${ls_output}" == *" -> "* ]]; do
		cmd_path="$(readlink "${cmd_path}")"
		ls_output="$(ls -l "${cmd_path}")"
	done
	jvm_dir=$(dirname "${cmd_path}")
	if [[ -f "${jvm_dir}/java_home" ]]; then
		jvm_dir=$("${jvm_dir}/java_home")
	fi
	eval "${1}='${jvm_dir}'"
}

function detect_system_jdk() {
	local -r jdk_output="$(java -fullversion 2>&1)"
	if [[ "${jdk_output}" == *"command not found"* ]]; then
		USE_SYSTEM_JDK=N
		return 0
	fi

	if [[ "${jdk_output}" != *"java full version \"${JVM_VERSION_MAJOR}."* && "${jdk_output}" != *"java full version \"1.${JVM_VERSION_MAJOR}."* ]]; then
		USE_SYSTEM_JDK=N
		return 0
	fi

	USE_SYSTEM_JDK=Y
	get_system_path 'JDK_HOME_DIR' 'javac'

	return 0
}

function main() {
	if [[ "${OS}" == "darwin" ]]; then
		system_check_program_exists "${REQUIRED_COMMANDS_CORE}" "${REQUIRED_COMMANDS_DARWIN}"
	else
		system_check_program_exists "${REQUIRED_COMMANDS_CORE}" "${REQUIRED_COMMANDS_LINUX}"
	fi
	main_properties
	if [[ "${USE_SYSTEM_JDK}" == "Y" ]]; then
		detect_system_jdk
	fi

	if [[ "${USE_SYSTEM_JDK}" -eq "Y" ]]; then
		JVM_HOME_DIR="${JDK_HOME_DIR}"
	fi

	if [[ "$1" == "info" ]]; then
		print_debug_info
		echo "JDK_HOME=${JDK_HOME_DIR}"
		echo "JAVA_HOME=${JVM_HOME_DIR}"
		return 0
	fi

	download_jdk

	if [[ -z "${JDK_HOME_DIR}" ]]; then
		error "can't JDK_HOME_DIR"

	elif [[ -z "$1" ]]; then
		error "command is empty"

	else
		# execute program
		print_debug_info
		debug "command: ${JDK_HOME_DIR}/bin/$1" "${@:2}"
		eval "${JDK_HOME_DIR}/bin/$1" "${@:2}"
	fi
}

main "$@"